{"ast":null,"code":"var _jsxFileName = \"/Users/flatironschool/Development/projects/udemy-streams-app/client/src/components/streams/StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = formProps => {\n      const className = \"field \".concat(formProps.meta.error && formProps.meta.error ? 'error' : '');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, formProps.label), React.createElement(\"input\", Object.assign({}, formProps.input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      })), this.renderError(formProps.meta));\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return React.createElement(\"div\", {\n        className: \"ui error message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      }, error));\n    }\n  } // ...formProps.input replaces value= and onChange= properties; also, formProps can be destructured.\n\n\n  onSubmit() {// Redux form takes care of e.preventDefault for us, so no need to call it.\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"ui form error\",\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Enter Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Enter Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate\n})(StreamCreate);","map":{"version":3,"sources":["/Users/flatironschool/Development/projects/udemy-streams-app/client/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","StreamCreate","Component","renderInput","formProps","className","meta","error","label","input","renderError","touched","onSubmit","render","props","handleSubmit","validate","formValues","errors","title","description","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;AAEA,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAazCC,WAbyC,GAa1BC,SAAD,IAAe;AAC3B,YAAMC,SAAS,mBAAYD,SAAS,CAACE,IAAV,CAAeC,KAAf,IAAwBH,SAAS,CAACE,IAAV,CAAeC,KAAvC,GAA+C,OAA/C,GAAwD,EAApE,CAAf;AACA,aACE;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQD,SAAS,CAACI,KAAlB,CADA,EAEE,+CAAWJ,SAAS,CAACK,KAArB;AAA4B,QAAA,YAAY,EAAC,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,EAGG,KAAKC,WAAL,CAAiBN,SAAS,CAACE,IAA3B,CAHH,CADF;AAOD,KAtBwC;AAAA;;AAEzCI,EAAAA,WAAW,CAAC;AAAEH,IAAAA,KAAF;AAASI,IAAAA;AAAT,GAAD,EAAoB;AAC7B,QAAGA,OAAO,IAAIJ,KAAd,EAAoB;AAClB,aACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGA,KADH,CADF,CADF;AAMA;AACH,GAXwC,CAYzC;;;AAYAK,EAAAA,QAAQ,GAAG,CACT;AAED;;AAEDC,EAAAA,MAAM,GAAG;AACP,WACI;AAAM,MAAA,SAAS,EAAC,eAAhB;AAAgC,MAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKH,QAA7B,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAE,KAAKT,WAApC;AAAiD,MAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AAA0B,MAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,MAAA,KAAK,EAAC,mBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,CADJ;AAMA;;AApCuC;;AAuC3C,MAAMa,QAAQ,GAAIC,UAAD,IAAgB;AAC/B,QAAMC,MAAM,GAAG,EAAf;;AACA,MAAG,CAACD,UAAU,CAACE,KAAf,EAAqB;AACnBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACD;;AACD,MAAG,CAACF,UAAU,CAACG,WAAf,EAA4B;AAC1BF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACD;;AACD,SAAOF,MAAP;AACD,CATD;;AAWA,eAAelB,SAAS,CAAC;AACvBqB,EAAAA,IAAI,EAAE,cADiB;AAEvBL,EAAAA;AAFuB,CAAD,CAAT,CAGZf,YAHY,CAAf","sourcesContent":["import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamCreate extends React.Component {\n\n  renderError({ error, touched }){\n    if(touched && error){\n      return (\n        <div className=\"ui error message\">\n          <div className=\"header\">\n            {error}\n          </div>\n        </div>\n    )}\n  }\n  // ...formProps.input replaces value= and onChange= properties; also, formProps can be destructured.\n  renderInput = (formProps) => {\n    const className = `field ${formProps.meta.error && formProps.meta.error ? 'error': ''}`;\n    return (\n      <div className={className}>\n      <label>{formProps.label}</label>\n        <input {...formProps.input} autoComplete='off' />\n        {this.renderError(formProps.meta)}\n      </div>\n    )\n  };\n\n  onSubmit() {\n    // Redux form takes care of e.preventDefault for us, so no need to call it.\n\n  }\n\n  render() {\n    return (\n        <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)} >\n          <Field name=\"title\" component={this.renderInput} label=\"Enter Title\" />\n          <Field name=\"description\" component={this.renderInput} label=\"Enter Description\" />\n          <button className=\"ui button primary\">Submit</button>\n        </form>\n  )};\n}\n\nconst validate = (formValues) => {\n  const errors = {};\n  if(!formValues.title){\n    errors.title = \"You must enter a title\";\n  }\n  if(!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate\n})(StreamCreate);\n"]},"metadata":{},"sourceType":"module"}