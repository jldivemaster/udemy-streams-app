{"ast":null,"code":"import _defineProperty from \"/Users/flatironschool/Development/projects/udemy-streams-app/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Action Creators are just functions that return an object with an action TYPE k/v pair,\n// and maybe a payload (like the body of a fetch request config object).\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAM, FETCH_STREAMS, EDIT_STREAM, DELETE_STREAM } from './types';\nimport streams from '../apis/streams';\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n};\nexport const createStream = formValues => async (dispatch, getState) => {\n  const userId = getState().auth.userId;\n  const response = await streams.post('/streams', _objectSpread({}, formValues, {\n    userId\n  }));\n  dispatch({\n    type: CREATE_STREAM,\n    payload: response.data\n  }); // Programmatic nav to redirect user to root path after successful creation:\n};\nexport const fetchStreams = () => async dispatch => {\n  const response = await streams.get('/streams');\n  dispatch({\n    type: FETCH_STREAMS,\n    payload: response.data\n  });\n};\nexport const fetchStream = id => async dispatch => {\n  const response = await streams.get(\"/streams/\".concat(id));\n  dispatch({\n    type: FETCH_STREAM,\n    payload: response.data\n  });\n};\nexport const editStream = (id, formValues) => async dispatch => {\n  const response = await streams.put(\"/streams/\".concat(id), formValues);\n  dispatch({\n    type: EDIT_STREAM,\n    payload: response.data\n  });\n};\nexport const deleteStream = id => async dispatch => {\n  await streams.delete(\"/streams/\".concat(id));\n  dispatch({\n    type: DELETE_STREAM,\n    payload: id\n  });\n};","map":{"version":3,"sources":["/Users/flatironschool/Development/projects/udemy-streams-app/client/src/actions/index.js"],"names":["SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAM","FETCH_STREAMS","EDIT_STREAM","DELETE_STREAM","streams","signIn","userId","type","payload","signOut","createStream","formValues","dispatch","getState","auth","response","post","data","fetchStreams","get","fetchStream","id","editStream","put","deleteStream","delete"],"mappings":";;;;;;AAAA;AACA;AACA,SAASA,OAAT,EAAkBC,QAAlB,EAA4BC,aAA5B,EAA2CC,YAA3C,EACUC,aADV,EACyBC,WADzB,EACsCC,aADtC,QAC2D,SAD3D;AAEA,OAAOC,OAAP,MAAoB,iBAApB;AAEA,OAAO,MAAMC,MAAM,GAAIC,MAAD,IAAY;AAChC,SAAO;AACLC,IAAAA,IAAI,EAAEV,OADD;AAELW,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMG,OAAO,GAAG,MAAM;AAC3B,SAAO;AACLF,IAAAA,IAAI,EAAET;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMY,YAAY,GAAGC,UAAU,IAAI,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAAA,QAC9DP,MAD8D,GACnDO,QAAQ,GAAGC,IADwC,CAC9DR,MAD8D;AAEtE,QAAMS,QAAQ,GAAG,MAAMX,OAAO,CAACY,IAAR,CAAa,UAAb,oBAA8BL,UAA9B;AAA0CL,IAAAA;AAA1C,KAAvB;AAEAM,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAER,aAAR;AAAuBS,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAzC,GAAD,CAAR,CAJsE,CAKtE;AAED,CAPM;AASP,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAMN,QAAN,IAAkB;AAClD,QAAMG,QAAQ,GAAG,MAAMX,OAAO,CAACe,GAAR,CAAY,UAAZ,CAAvB;AAEAP,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEN,aAAR;AAAuBO,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAzC,GAAD,CAAR;AACD,CAJM;AAMP,OAAO,MAAMG,WAAW,GAAIC,EAAD,IAAQ,MAAMT,QAAN,IAAkB;AACnD,QAAMG,QAAQ,GAAG,MAAMX,OAAO,CAACe,GAAR,oBAAwBE,EAAxB,EAAvB;AAEAT,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEP,YAAR;AAAsBQ,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAxC,GAAD,CAAR;AACD,CAJM;AAMP,OAAO,MAAMK,UAAU,GAAG,CAACD,EAAD,EAAKV,UAAL,KAAoB,MAAMC,QAAN,IAAkB;AAC9D,QAAMG,QAAQ,GAAG,MAAMX,OAAO,CAACmB,GAAR,oBAAwBF,EAAxB,GAA8BV,UAA9B,CAAvB;AAEAC,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEL,WAAR;AAAqBM,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAvC,GAAD,CAAR;AACD,CAJM;AAMP,OAAO,MAAMO,YAAY,GAAIH,EAAD,IAAQ,MAAMT,QAAN,IAAkB;AACpD,QAAMR,OAAO,CAACqB,MAAR,oBAA2BJ,EAA3B,EAAN;AAEAT,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEJ,aAAR;AAAuBK,IAAAA,OAAO,EAAEa;AAAhC,GAAD,CAAR;AACD,CAJM","sourcesContent":["// Action Creators are just functions that return an object with an action TYPE k/v pair,\n// and maybe a payload (like the body of a fetch request config object).\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAM,\n          FETCH_STREAMS, EDIT_STREAM, DELETE_STREAM } from './types';\nimport streams from '../apis/streams';\n\nexport const signIn = (userId) => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  }\n};\n\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  }\n};\n\nexport const createStream = formValues => async (dispatch, getState) => {\n  const { userId } = getState().auth;\n  const response = await streams.post('/streams', { ...formValues, userId });\n\n  dispatch({ type: CREATE_STREAM, payload: response.data })\n  // Programmatic nav to redirect user to root path after successful creation:\n  \n};\n\nexport const fetchStreams = () => async dispatch => {\n  const response = await streams.get('/streams');\n\n  dispatch({ type: FETCH_STREAMS, payload: response.data })\n};\n\nexport const fetchStream = (id) => async dispatch => {\n  const response = await streams.get(`/streams/${id}`)\n\n  dispatch({ type: FETCH_STREAM, payload: response.data })\n};\n\nexport const editStream = (id, formValues) => async dispatch => {\n  const response = await streams.put(`/streams/${id}`, formValues);\n\n  dispatch({ type: EDIT_STREAM, payload: response.data })\n};\n\nexport const deleteStream = (id) => async dispatch => {\n  await streams.delete(`/streams/${id}`);\n\n  dispatch({ type: DELETE_STREAM, payload: id })\n}\n"]},"metadata":{},"sourceType":"module"}