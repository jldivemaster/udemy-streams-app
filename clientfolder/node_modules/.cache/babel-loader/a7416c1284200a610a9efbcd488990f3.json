{"ast":null,"code":"import _defineProperty from \"/Users/flatironschool/Development/projects/udemy-streams-app/clientfolder/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _ from 'lodash';\nimport { FETCH_STREAM, FETCH_STREAMS, CREATE_STREAM, EDIT_STREAM, DELETE_STREAM } from '../actions/types';\nexport default ((state = {}, action) => {\n  switch (action.type) {\n    case FETCH_STREAM:\n      return _objectSpread({}, state, {\n        [action.payload.id]: action.payload\n      });\n\n    case CREATE_STREAM:\n      return _objectSpread({}, state, {\n        [action.payload.id]: action.payload\n      });\n\n    case EDIT_STREAM:\n      return _objectSpread({}, state, {\n        [action.payload.id]: action.payload\n      });\n\n    case DELETE_STREAM:\n      return _.omit(state, action.payload);\n\n    case FETCH_STREAMS:\n      return _objectSpread({}, state, {}, _.mapKeys(action.payload, 'id'));\n\n    default:\n      return state;\n  }\n}); // Array-based approach (for comparison):\n// const streamReducer = (state = [], action) => {\n//   switch(action.type) {\n//     case EDIT_STREAM:\n//       return state.map(stream => {\n//         if(stream.id === action.payload.id) {\n//           return action.payload;\n//         } else {\n//           return stream;\n//         }\n//       })\n//     default:\n//       return state;\n//   }\n// };\n// Object-based approach (more straightforward):\n// const streamReducer = (state ={}, action) => {\n//   switch(action.type) {\n//     case EDIT_STREAM:\n// const newState = { ...state };\n// newState[action.payload.id] = action.payload;\n// return newState;\n// ^ SAME AS :\n//       return { ...state, [action.payload.id]: action.payload };\n//     default:\n//       return state;\n//   }\n// }","map":{"version":3,"sources":["/Users/flatironschool/Development/projects/udemy-streams-app/clientfolder/src/reducers/streamReducer.js"],"names":["_","FETCH_STREAM","FETCH_STREAMS","CREATE_STREAM","EDIT_STREAM","DELETE_STREAM","state","action","type","payload","id","omit","mapKeys"],"mappings":";;;;;;AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,aAAtC,EACUC,WADV,EACuBC,aADvB,QAC4C,kBAD5C;AAGA,gBAAe,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACrC,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKP,YAAL;AACE,+BAAYK,KAAZ;AAAmB,SAACC,MAAM,CAACE,OAAP,CAAeC,EAAhB,GAAqBH,MAAM,CAACE;AAA/C;;AACF,SAAKN,aAAL;AACE,+BAAYG,KAAZ;AAAmB,SAACC,MAAM,CAACE,OAAP,CAAeC,EAAhB,GAAqBH,MAAM,CAACE;AAA/C;;AACF,SAAKL,WAAL;AACE,+BAAYE,KAAZ;AAAmB,SAACC,MAAM,CAACE,OAAP,CAAeC,EAAhB,GAAqBH,MAAM,CAACE;AAA/C;;AACF,SAAKJ,aAAL;AACE,aAAOL,CAAC,CAACW,IAAF,CAAOL,KAAP,EAAcC,MAAM,CAACE,OAArB,CAAP;;AACF,SAAKP,aAAL;AACE,+BAAYI,KAAZ,MAAsBN,CAAC,CAACY,OAAF,CAAUL,MAAM,CAACE,OAAjB,EAA0B,IAA1B,CAAtB;;AACF;AACE,aAAOH,KAAP;AAZJ;AAcD,CAfD,E,CAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACoB;AACA;AACA;AACN;AACM;AACA;AACpB;AACA;AACA","sourcesContent":["import _ from 'lodash';\nimport { FETCH_STREAM, FETCH_STREAMS, CREATE_STREAM,\n          EDIT_STREAM, DELETE_STREAM } from '../actions/types';\n\nexport default (state = {}, action) => {\n  switch(action.type) {\n    case FETCH_STREAM:\n      return { ...state, [action.payload.id]: action.payload };\n    case CREATE_STREAM:\n      return { ...state, [action.payload.id]: action.payload };\n    case EDIT_STREAM:\n      return { ...state, [action.payload.id]: action.payload };\n    case DELETE_STREAM:\n      return _.omit(state, action.payload);\n    case FETCH_STREAMS:\n      return { ...state, ..._.mapKeys(action.payload, 'id') };\n    default:\n      return state;\n  }\n};\n\n// Array-based approach (for comparison):\n// const streamReducer = (state = [], action) => {\n//   switch(action.type) {\n//     case EDIT_STREAM:\n//       return state.map(stream => {\n//         if(stream.id === action.payload.id) {\n//           return action.payload;\n//         } else {\n//           return stream;\n//         }\n//       })\n//     default:\n//       return state;\n//   }\n// };\n\n\n// Object-based approach (more straightforward):\n// const streamReducer = (state ={}, action) => {\n//   switch(action.type) {\n//     case EDIT_STREAM:\n                    // const newState = { ...state };\n                    // newState[action.payload.id] = action.payload;\n                    // return newState;\n              // ^ SAME AS :\n                    //       return { ...state, [action.payload.id]: action.payload };\n                    //     default:\n//       return state;\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}